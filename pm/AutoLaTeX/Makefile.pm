# autolatex - Makefile.pm
# Copyright (C) 1998-07  Stephane Galland <galland@arakhne.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

=pod

=head1 NAME

Makefile.pm - Makefile Utilities

=head1 DESCRIPTION

Permits to generate a valid Makefile for AutoLaTeX.

To use this library, type C<use AutoLaTeX::Makefile;>.

=head1 FUNCTIONS

The provided functions are:

=over 4

=cut
package AutoLaTeX::Makefile;

$VERSION = '5.1';
@ISA = ('Exporter');
@EXPORT = qw( &selectMakefileToOutput &removeUnsupportedMakefileVariables &getMakefileContent ) ;
@EXPORT_OK = qw();

use strict;

use vars qw(@ISA @EXPORT @EXPORT_OK $VERSION);
use File::Spec;
use AutoLaTeX::Util;
use AutoLaTeX::Config;
use AutoLaTeX::Translator;
use AutoLaTeX::Locale;

# List of supported variables that could be overridden inside the Makefile
my %supportedsetvars = (
	'latex' => "LATEX_CMD",
	'latexdraftflags' => "LATEX_DRAFT_FLAGS",
	'latexflags' => "LATEX_FLAGS",
	'bibtex' => "BIBTEX_CMD",
	'bibtexflags' => "BIBTEX_FLAGS",
	'makeindex' => "MAKEINDEX_CMD",
	'makeindexflags' => "MAKEINDEX_FLAGS",
	'dvips' => "DVIPS_CMD",
	'dvipsflags' => "DVIPS_FLAGS",
	'ps2pdf' => "PS2PDF_CMD",
	'ps2pdfflags' => "PS2PDF_FLAGS",
	'commit' => "SCM_COMMIT_CMD",
	'update' => "SCM_UPDATE_CMD",
	'touch' => "TOUCH_CMD",
	'stdout' => "ECHO_CMD",
	'stderr' => "ECHO_ERR_CMD",
	'rm' => "RM",
	'filestoclean' => "+TMPFILES",
	'fielstodesintegrate' => "+DESINTEGRABLEFILES",
	);

=pod

=item B<removeUnsupportedMakefileVariables(\%)>

Remove from the specified configuration the unsupported "set" variables.

I<Parameters:>

=over 8

=item * hashtable that contains the current configuration, and that will
be updating by this function.

=back

I<Returns:> nothing

=cut
sub removeUnsupportedMakefileVariables(\%) {
	if ((exists $_[0]->{'generation.set'})&&($_[0]->{'generation.set'})) {
		my %validatedSet = ();
		while (my ($k,$v) = each(%{$_[0]->{'generation.set'}})) {
			if ($supportedsetvars{"$k"}) {
				locDbg("Override the Makefile variable '{}'",$supportedsetvars{"$k"});
				$validatedSet{$supportedsetvars{"$k"}} = $v;
				delete $_[0]->{'generation.set'}{"$k"};
			}
		}
		delete $_[0]->{'generation.set'} unless($_[0]->{'generation.set'});
		$_[0]->{'__private__'}{'makefile.set variables'} = \%validatedSet;
	}
}

=pod

=item B<selectMakefileToOutput(\%)>

Update the specified configuration by detecting the name of the Makefile
to create. This function assumes that the name S<Makefile> is avoid
when a file called S<Makefile> already exists and was not generated by
AutoLaTeX. The Makefile file is searched prior in the makefile directory
given by the configuration, and if not Makefile exists, the project's
directory is scanned.

I<Parameters:>

=over 8

=item * hashtable that contains the current configuration, and that will
be updating by this function.

=back

I<Returns:> nothing

=cut
sub selectMakefileToOutput(\%) {
	my $makefilename = undef;

	if ($_[0]->{'__private__'}{'output.makefile directory'}) {
		# --output was given, check and use its value
		if (-d $_[0]->{'__private__'}{'output.makefile directory'}) {
			$makefilename = File::Spec->catfile($_[0]->{'__private__'}{'output.makefile directory'},"Makefile");
		}
		else {
			printErr($_[0]->{'__private__'}{'output.makefile directory'}.":","$!");
		}
	}

	# If the Makefile name was never set, force the default value: <rep>/Makefile
	if (!$makefilename) {
		$makefilename = File::Spec->catfile($_[0]->{'__private__'}{'output.directory'} || $ENV{'HOME'},"Makefile");
	}

	# Avoid deletion of Makefile that was not generated by autolatex.
	# Test if the makefile was generated by autolatex, if not
	# change the name of the Makefile to create.
	if (-f "$makefilename") {
		local *MAKEFILE;
		open(*MAKEFILE, "< $makefilename") or die("$makefilename: $!\n");
		while (my $line = <MAKEFILE>) {
			if ($line) {
				if ($line !~ /^\#\s*File\s+automatically\s+generated\s+by\s+autolatex/i) {
					$makefilename .= ".autolatex";
				}
				last;
			}
		}
		close(*MAKEFILE);
	}

	$_[0]->{'__private__'}{'output.makefile name'} = "$makefilename";
	locDbg("Makefile is '{}'",$makefilename);
}

=pod

=item B<getMakefileContent(\%)>

Build and replies the content of a valid Makefile for AutoLaTeX.

I<Parameters:>

=over 8

=item * hastable that contains several configuration values. The supported keys are:

=over 10

=item C<{ist-file}> 

=back

=back

I<Returns:> The content of the Makefile as a string.

=cut
sub getMakefileContent(\%) {

	my %translators = getLoadableTranslatorList(%{$_[0]});

	my $content = 	join("\n",
		"# File automatically generated by autolatex ".getAutoLaTeXVersion().".",
		'# Copyright (C) 1998-08  Stephane Galland <galland\@arakhne.org>',
		'#',
		'# This program is free software; you can redistribute it and/or modify',
		'# it under the terms of the GNU General Public License as published by',
		'# the Free Software Foundation; either version 2 of the License, or',
		'# (at your option) any later version.',
		'#',
		'# This program is distributed in the hope that it will be useful,',
		'# but WITHOUT ANY WARRANTY; without even the implied warranty of',
		'# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the',
		'# GNU General Public License for more details.',
		'#',
		'# You should have received a copy of the GNU General Public License',
		'# along with this program; see the file COPYING.  If not, write to',
		'# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,',
		'# Boston, MA 02111-1307, USA.',
		'',
		"# File generated by the command '".getAutoLaTeXLaunchingName()."' v".getAutoLaTeXVersion(),
		"# the ".localtime().".",
		'# Do not directly edit this file.',
		'',
		'# localized strings',
		'I18N_LAUNCH_ACROREAD = '.locGet("Launching Acrobat Reader"),
		'I18N_LAUNCH_KPDF = '.locGet("Launching KDE's PDF viewer"),
		'I18N_LAUNCH_EVINCE = '.locGet("Launching Evince"),
		'I18N_LAUNCH_XPDF = '.locGet("Launching xpdf"),
		'I18N_LAUNCH_GHOSTVIEW = '.locGet("Launching Ghostview"),
		'I18N_NO_VIEWER_DETECTED = '.locGet("No viewer detected"),
		'I18N_NO_SCM_UPDATE = '.locGet("No SCM update command defined"),
		'I18N_NO_SCM_COMMIT = '.locGet("No SCM commit command defined"),
		'',
		'# include the common variable definitions',
		'include '.File::Spec->catfile(getAutoLaTeXDir(),"mkfiles","MainVars.mk"),
		'',
		'# Force the default rule to be \'view\'',
		'all:: view',
		'');

	# Put the validated macro definition in the command line.
	#Â These definitions will be prior to the Makefile's definitions
	if ($_[0]->{'__private__'}{'makefile.set variables'}) {
		$content = join("\n",
				$content,
				"# Force the value of the variables overridden in the configuration");
		while ( my ($opt,$value) = each(%{$_[0]->{'__private__'}{'makefile.set variables'}})) {
			if ($opt =~ /^\+(.*)$/) {
				my $name = "$1";
				$content = join("\n",
						$content,
						"$name += $value");
			}
			else {
				$content = join("\n",
						$content,
						"$opt = $value");
			}
		}
		$content = join("\n",
				$content,
				'');
	}

	# Force the name of the generated name inside the corresponding variable
	$content = join("\n",
		$content,
		'# redefinition of the Makefile filename',
		($_[0]->{'__private__'}{'output.makefile name'} ? 'MAKEFILE_FILENAME := '.$_[0]->{'__private__'}{'output.makefile name'} : '#none'),
		'');

	# Be sure that the main LaTeX file to use is theone detected by this script
	if ($_[0]->{'__private__'}{'output.latex basename'}) {
		$content = join("\n",
				$content,
				"\# Be sure that the main LaTeX file to use is theone detected by this script",
				"FILE := ".$_[0]->{'__private__'}{'output.latex basename'},
				'');
	}

	# Give to GNU MAKE the pdf viewer given from command line
	if ($_[0]->{'viewer.viewer'}) {
		$content = join("\n",
				$content,
				"\# Give to GNU MAKE the pdf viewer given from command line",
				"PDF_VIEWER := ".$_[0]->{'viewer.viewer'},
				'');
	}

	# Be sure that view PDF flag was correctly set
	if ($_[0]->{'viewer.view'}) {
		my $active = cfgBoolean($_[0]->{'viewer.view'});
		$content = join("\n",
				$content,
				"\# Be sure that view PDF flag was correctly set",
				"OPEN_PDF := ".($active ? "yes" : "no"),
				'');
	}

	# Force GNU MAKE to use the generation procedure which was specified
	# on the command line
	if (exists $_[0]->{'generation.generation type'}) {
		$content = join("\n",
				$content,
				"\# Force GNU MAKE to use the generation procedure which was specified",
				"\# on the command line",
				"LATEX_GENERATION_PROCEDURE := ".$_[0]->{'generation.generation type'},
				'');
	}

	# Include the translator scripts
	if (%translators) {
		$content = join("\n",
				$content,
				"\#----------------------------\#",
				"\# Load available translators \#",
				"\#----------------------------\#");
		while (my ($translator,$scriptfile) = each (%translators)) {
			my $translatornamecmp = extractTranslatorNameComponents("$translator");
			my $translatorbasename = $translatornamecmp->{"basename"};
			$content = join("\n",
					$content,
					"\# set the filename of the translator $translator",
					"TRANSLATOR_MKFILE_${translatorbasename} := $scriptfile");
		}

		while (my ($translator,$scriptfile) = each (%translators)) {
			$content = join("\n",
					$content,
					"\# include code of translator $translator",
					"include $scriptfile");			
		}
		$content = join("\n",
				$content,
				"\#----------------------------\#",
				'');
	}
	
	$content = join("\n",
		$content,
		'# include common rules',
		'include '.File::Spec->catfile(getAutoLaTeXDir(),"mkfiles","MainRules.mk"));

	return $content;
}


1;
__END__

=back

=head1 BUG REPORT AND FEEDBACK

To report bugs, provide feedback, suggest new features, etc. visit the AutoLaTeX Project management page at <http://www.arakhne.org/autolatex/> or send email to the author at L<galland@arakhne.org>.

=head1 LICENSE

S<GNU Public License (GPL)>

=head1 COPYRIGHT

S<Copyright (c) 1998-07 StÃ©phane Galland E<lt>galland@arakhne.orgE<gt>>

=head1 SEE ALSO

L<autolatex-dev>
